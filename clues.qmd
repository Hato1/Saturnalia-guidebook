---
format: 
  html:
    page-layout: custom
    css: styles_noscroll.css
execute:
  echo: false
---
```{python}
import pandas
from ipyleaflet import (
    Map,
    Marker,
    basemaps,
    basemap_to_tiles,
    projections,
    ImageOverlay,
    Icon,
    CircleMarker,
    Circle,
    FullScreenControl,
)
import ipywidgets as widgets

m = Map(
  crs=projections.Simple,
  center=(1450/2, 1932/2),
  zoom=-1,
  min_zoom=-5,
  attribution_control=False,
  scroll_wheel_zoom=True,
  zoom_snap=0.5,
  zoom_delta=0.5,
  layers=[],
)
bounds = ((0, 0), (1932, 1450)[::-1])
image = ImageOverlay(
    url="images/map.png",
    bounds=bounds
)

m.fit_bounds(bounds)

control = FullScreenControl()
m.add_control(control)

m.add_layer(image)


clues = {}
with open("clues.txt") as f:
    for i, clue in enumerate(f.read().split("\n\n\n")):
        coord = f"{i % 14},{i // 14}"
        clue = clue.split("\n")
        clue[0] = '<b><div class="clue-name">' + clue[0] + "</div></b>"

        for i, c in enumerate(clue[1:-1]):
            clue[i+1] = '<b><div class="clue-desc">' + clue[i+1] + "</div></b>"

        location1 = clue[-2].split()[0]
        location2 = clue[-1].split()[0]
        if location1 == "Location:":
            pass
        elif location2 == "Location:":
            pass

        quoter = clue[-1].split()[0]
        if quoter[-1] == ":" and quoter != "Location:":
            quoter = quoter[:-1]
            quote = open("message_box.html").read()
            quote = quote.replace("PICTURE_HERE", f"images/{quoter}.jpg")
            quote = quote.replace("QUOTE_HERE", clue[-1].partition(": ")[2])
            clue[-1] = quote
        else:
            clue[-1] = '<b><div class="clue-desc">' + clue[-1] + "</div></b>"

        clues[coord] = "<br>".join(clue)

xpad = 69.5
ypad = 102
distance = 127.2
WIDTH = 14
HEIGHT = 11
for i in range(WIDTH):
    for j in range(HEIGHT):
        tooltip = widgets.HTML(
            value=clues[f"{i},{HEIGHT - j - 1}"],
            # placeholder='Some HTML',
            # description=clues[f"{i},{j}"],
        )
        location = j*distance+ypad, i*distance+xpad
        circle = Circle(location=location, radius=41)
        circle.color = "transparent"
        circle.fill_color = "transparent"
        circle.popup = tooltip
        m.add_layer(circle)

# layout.minheight 
m.layout.height = "calc(100vh - 70px)"
m
```